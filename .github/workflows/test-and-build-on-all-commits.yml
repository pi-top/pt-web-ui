name: Test and Build Packages on All Commits

on: push

jobs:
  # test-coverage:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2.2.0

  #     - name: Run tests
  #       run: |
  #         docker run --rm \
  #           --volume ${{ github.workspace }}:/src \
  #           -e RUN_PYTHON_TESTS=1 \
  #           -e PYTHON_TESTS_DIR=./tests \
  #           -e PYTHON_TARGET_DIR=. \
  #           -e PYTHON_COVERAGE_DIR=pitop \
  #           pitop/test-run

  #     - name: Upload test coverage report to Codecov
  #       uses: codecov/codecov-action@v1
  #       with:
  #         files: ./coverage.xml
  #         flags: unittests
  #         env_vars: OS,PYTHON
  #         fail_ci_if_error: true
  #         verbose: true

  check-needs-compiling:
    runs-on: ubuntu-20.04
    outputs:
      needs_compiling: ${{ steps.check_needs_compiling.outputs.needs_compiling }}
      binary_name: ${{ steps.check_needs_compiling.outputs.binary_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Set 'needs compiling' variable
        id: check_needs_compiling
        run: |
          conditions_met="false"
          project_filename=$(find src -name "*.pro" | xargs -n 1 basename | cut -d '.' -f 1)
          if [[ ! -z $project_filename ]]
            conditions_met="true"
          fi
          
          echo $project_filename
          echo "::set-output name=needs_compiling::${conditions_met}"
          echo "::set-output name=binary_name::${project_filename}"

  compile-qt-app:
    needs: check-needs-compiling
    if: needs.check-needs-compiling.outputs.needs_compiling == 'true'
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.GH_PAT }}

      - name: Compile application
        run: |
          echo ${{ needs.check-needs-compiling.outputs.binary_name }}
          docker build -t qt-builder .
          docker create -ti --name qt-builder-tmp qt-builder bash
          docker cp qt-builder-tmp:/src/${{ needs.check-needs-compiling.outputs.binary_name }} .
          docker rm -fv qt-builder-tmp

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: needs.check-needs-compiling.outputs.binary_name


  build-debian-packages:
    needs: compile-qt-app
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Download compiled binary
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Patch changelog (snapshot)
        run: |
          docker run --rm \
            --volume ${{ github.workspace }}:/src \
            -e RELEASE=0 \
            pitop/gbp-dch-gen:latest

      - name: Build Debian package
        run: |
          mkdir -p /tmp/artifacts/{src,bin}
          docker run --rm \
            --volume ${{ github.workspace }}:/src \
            --volume /tmp/artifacts/bin:/build \
            -e LINTIAN_TAGS_TO_SUPPRESS="debian-changelog-line-too-long,spelling-error-in-changelog,unreleased-changelog-distribution,package-supports-alternative-init-but-no-init.d-script" \
            -e INSTALL_BUILD_DEPS=0 \
            pitop/deb-build:latest

      - name: Separate Debian source package files from binary
        run: |
          mv /tmp/artifacts/bin/* /tmp/artifacts/src/
          mv /tmp/artifacts/src/*.deb /tmp/artifacts/bin/

      - name: Upload Debian source package files
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb-src"
          path: "/tmp/artifacts/src/"

      - name: Upload Debian binary packages
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
          path: "/tmp/artifacts/bin/"

      - name: Move artifacts to current working directory
        run: |
          mkdir -p ${{ github.workspace }}/.artifacts
          mv /tmp/artifacts/**/* ${{ github.workspace }}/.artifacts

      - name: Create pre-release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: eine/tip@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{ github.workspace }}/.artifacts/*

  create-version-update-changelog-pr:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: build-debian-packages
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Patch changelog (release)
        run: |
          docker run --rm \
            --volume ${{ github.workspace }}:/src \
            -e RELEASE=1 \
            pitop/gbp-dch-gen:latest

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          branch: ${{ secrets.CI_CHANGELOG_BUMP_BRANCH }}
          commit-message: ${{ secrets.CI_CHANGELOG_BUMP_COMMIT_MESSAGE }}
          title: ${{ secrets.CI_CHANGELOG_BUMP_TITLE }}
          body: ${{ secrets.CI_CHANGELOG_BUMP_BODY }}
          draft: true
          labels: "ci"
